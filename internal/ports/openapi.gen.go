// Package ports provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package ports

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Send notification to all subscriber
	// (POST /notification/send)
	SendNotification(w http.ResponseWriter, r *http.Request)
	// Subscriber Stats
	// (GET /notification/stats)
	SubscriberStats(w http.ResponseWriter, r *http.Request)
	// Subscriber Status
	// (POST /notification/status)
	SubscriberStatus(w http.ResponseWriter, r *http.Request)
	// Subscribe to notification
	// (POST /notification/subscribe)
	SubscribeNotification(w http.ResponseWriter, r *http.Request)
	// Unsubscribe to notification
	// (POST /notification/unsubscribe)
	UnsubscribeNotification(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Send notification to all subscriber
// (POST /notification/send)
func (_ Unimplemented) SendNotification(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Subscriber Stats
// (GET /notification/stats)
func (_ Unimplemented) SubscriberStats(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Subscriber Status
// (POST /notification/status)
func (_ Unimplemented) SubscriberStatus(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Subscribe to notification
// (POST /notification/subscribe)
func (_ Unimplemented) SubscribeNotification(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Unsubscribe to notification
// (POST /notification/unsubscribe)
func (_ Unimplemented) UnsubscribeNotification(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// SendNotification operation middleware
func (siw *ServerInterfaceWrapper) SendNotification(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SendNotification(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SubscriberStats operation middleware
func (siw *ServerInterfaceWrapper) SubscriberStats(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SubscriberStats(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SubscriberStatus operation middleware
func (siw *ServerInterfaceWrapper) SubscriberStatus(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SubscriberStatus(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SubscribeNotification operation middleware
func (siw *ServerInterfaceWrapper) SubscribeNotification(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SubscribeNotification(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UnsubscribeNotification operation middleware
func (siw *ServerInterfaceWrapper) UnsubscribeNotification(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UnsubscribeNotification(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/notification/send", wrapper.SendNotification)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/notification/stats", wrapper.SubscriberStats)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/notification/status", wrapper.SubscriberStatus)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/notification/subscribe", wrapper.SubscribeNotification)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/notification/unsubscribe", wrapper.UnsubscribeNotification)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RW33PbNgz+V3jcHtXYaZL25jdvy0PWrteb09t2uTxQEmQzk0iOAOP6ev7fd6AsWbKU",
	"X1u2pS85xQQ+AB8+AvwiM1s5a8AQytkXidkKKhU/z723nj+ctw48aYg/V4ColsCftHEgZxLJa7OU20Ri",
	"GZYjB9tEevgzaA+5nF3VVkkLdJ009ja9gYwY6Od9kDuj54CZ1460NXImP1jShc4U/ysaq0TCZ1W5ksHn",
	"nnRWglCpDSTQVkArzi4ZlkGayodC1DbdAB9gLXZBhqAHFDTeLQfbRC5I1T3oV0yWVDnPSN/CIqQ4TOuS",
	"DZRQ0URgSPkwBY/d7N62GWlDsAQf62TPC6MeAhfa3I9+cif6fah3gB1Ph2iH9LXQyYCfsbIaesMIvxpr",
	"52GWizY/gbVzJ8tClQhtoqm1JSjDZQeXK4J8TkPA9wpJ7M4F/+2V/ebs7dnx6dnpd4ksrK8U1QS8OZUP",
	"8tHW0A0fi25LGBPWH2Aufhym+UOpwZC45POewhEyD3T8+mTs0vwfdTcl9MvmQQRZ8Jo2Cx5ndblzp9/B",
	"Zh5oFbvOea1A5eBlIo2qOMxvr+YfL169O/99H1lFL7llUG0Ky76ZNaSyWOfO8SfwYFC8B4OBKQu+ZHgi",
	"h7PJZL1eH91EizIaHGW2mjBlfZZ+OV9cFqEUc6dFYb3A4Jz1pM1S1N5iDalQzsl2QjWBf4VUzOPBLXis",
	"4Y6PpkdTjmIdGOW0nMmT+FMinaJV5GRiOiNtgmDyKBOLsTgWSzy5yPk2gMm7E1DWrQCk722+aXgBE12V",
	"c2UDe4OcT7Na+OtbD4WcyW8m+90z2S2eSTP5I+MH9xFMzmy4gCthRua9ICtU2RssovC2Egj+NjZ6Lx7y",
	"AaKa0FmDtUReT09HZtUK+sFW6hZECmAEEyYwZBkgFqEsN3VTCxVKejZC6jU8Qkcw8NlBxncKdjZ74cvZ",
	"VV/yV9fb60RiqCrlNzsy+3UNyIuABxJpdtQSxiTSuta7bEDv9NlYqQOMsMLp72e2aBL4mjqzXztNlWNt",
	"2O2y8bvaa0TAf+muLrpSecJ1jZuF9bYE2q3WJ97T5xVSGFUS2dy+ANncpYswKozG5hHa+A+G+eMEYmA9",
	"IhJqRNLWVGtEiSy+T/7eNP+E4LsTvMHuzvHN5kW2nbnoMjTS/mAeIYBPe6MXI4F7ZkSnpn++zA/a38F+",
	"uQLo9GtEAnGzMCEYF0sf+aO3ecgin4uGtf7bVDk9fJvya3F7vf0rAAD//8MdhIwcEAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
