// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
)

const (
	ApiKeyAuthScopes = "ApiKeyAuth.Scopes"
)

// Error defines model for Error.
type Error struct {
	Message string `json:"message"`
	Slug    string `json:"slug"`
}

// Message defines model for Message.
type Message struct {
	// Message Notification message
	Message string `json:"message"`

	// Title Notification title
	Title string `json:"title"`
}

// Stats defines model for Stats.
type Stats struct {
	// TotalActiveSubs Totala active subscribers
	TotalActiveSubs int `json:"totalActiveSubs"`

	// TotalInactiveSubs Total inactive subscribers
	TotalInactiveSubs int `json:"totalInactiveSubs"`

	// TotalSubs Total subscribers
	TotalSubs int `json:"totalSubs"`
}

// Status defines model for Status.
type Status struct {
	// IsActive Subscriber status
	IsActive bool `json:"isActive"`

	// UpdatedAt Last updated date
	UpdatedAt int64 `json:"updatedAt"`
}

// Subscriber defines model for Subscriber.
type Subscriber struct {
	// TokenID Client Token
	TokenID string `json:"tokenID"`

	// UpdatedAt Last updated date
	UpdatedAt int64 `json:"updatedAt"`
}

// SendNotificationJSONRequestBody defines body for SendNotification for application/json ContentType.
type SendNotificationJSONRequestBody = Message

// SubscriberStatusJSONRequestBody defines body for SubscriberStatus for application/json ContentType.
type SubscriberStatusJSONRequestBody = Subscriber

// SubscribeNotificationJSONRequestBody defines body for SubscribeNotification for application/json ContentType.
type SubscribeNotificationJSONRequestBody = Subscriber

// UnsubscribeNotificationJSONRequestBody defines body for UnsubscribeNotification for application/json ContentType.
type UnsubscribeNotificationJSONRequestBody = Subscriber

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// SendNotificationWithBody request with any body
	SendNotificationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SendNotification(ctx context.Context, body SendNotificationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SubscriberStats request
	SubscriberStats(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SubscriberStatusWithBody request with any body
	SubscriberStatusWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SubscriberStatus(ctx context.Context, body SubscriberStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SubscribeNotificationWithBody request with any body
	SubscribeNotificationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SubscribeNotification(ctx context.Context, body SubscribeNotificationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UnsubscribeNotificationWithBody request with any body
	UnsubscribeNotificationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UnsubscribeNotification(ctx context.Context, body UnsubscribeNotificationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) SendNotificationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSendNotificationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SendNotification(ctx context.Context, body SendNotificationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSendNotificationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SubscriberStats(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSubscriberStatsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SubscriberStatusWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSubscriberStatusRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SubscriberStatus(ctx context.Context, body SubscriberStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSubscriberStatusRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SubscribeNotificationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSubscribeNotificationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SubscribeNotification(ctx context.Context, body SubscribeNotificationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSubscribeNotificationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UnsubscribeNotificationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUnsubscribeNotificationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UnsubscribeNotification(ctx context.Context, body UnsubscribeNotificationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUnsubscribeNotificationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewSendNotificationRequest calls the generic SendNotification builder with application/json body
func NewSendNotificationRequest(server string, body SendNotificationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSendNotificationRequestWithBody(server, "application/json", bodyReader)
}

// NewSendNotificationRequestWithBody generates requests for SendNotification with any type of body
func NewSendNotificationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/notification/send")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSubscriberStatsRequest generates requests for SubscriberStats
func NewSubscriberStatsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/notification/stats")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSubscriberStatusRequest calls the generic SubscriberStatus builder with application/json body
func NewSubscriberStatusRequest(server string, body SubscriberStatusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSubscriberStatusRequestWithBody(server, "application/json", bodyReader)
}

// NewSubscriberStatusRequestWithBody generates requests for SubscriberStatus with any type of body
func NewSubscriberStatusRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/notification/status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSubscribeNotificationRequest calls the generic SubscribeNotification builder with application/json body
func NewSubscribeNotificationRequest(server string, body SubscribeNotificationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSubscribeNotificationRequestWithBody(server, "application/json", bodyReader)
}

// NewSubscribeNotificationRequestWithBody generates requests for SubscribeNotification with any type of body
func NewSubscribeNotificationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/notification/subscribe")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUnsubscribeNotificationRequest calls the generic UnsubscribeNotification builder with application/json body
func NewUnsubscribeNotificationRequest(server string, body UnsubscribeNotificationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUnsubscribeNotificationRequestWithBody(server, "application/json", bodyReader)
}

// NewUnsubscribeNotificationRequestWithBody generates requests for UnsubscribeNotification with any type of body
func NewUnsubscribeNotificationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/notification/unsubscribe")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// SendNotificationWithBodyWithResponse request with any body
	SendNotificationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SendNotificationResponse, error)

	SendNotificationWithResponse(ctx context.Context, body SendNotificationJSONRequestBody, reqEditors ...RequestEditorFn) (*SendNotificationResponse, error)

	// SubscriberStatsWithResponse request
	SubscriberStatsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SubscriberStatsResponse, error)

	// SubscriberStatusWithBodyWithResponse request with any body
	SubscriberStatusWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SubscriberStatusResponse, error)

	SubscriberStatusWithResponse(ctx context.Context, body SubscriberStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*SubscriberStatusResponse, error)

	// SubscribeNotificationWithBodyWithResponse request with any body
	SubscribeNotificationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SubscribeNotificationResponse, error)

	SubscribeNotificationWithResponse(ctx context.Context, body SubscribeNotificationJSONRequestBody, reqEditors ...RequestEditorFn) (*SubscribeNotificationResponse, error)

	// UnsubscribeNotificationWithBodyWithResponse request with any body
	UnsubscribeNotificationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UnsubscribeNotificationResponse, error)

	UnsubscribeNotificationWithResponse(ctx context.Context, body UnsubscribeNotificationJSONRequestBody, reqEditors ...RequestEditorFn) (*UnsubscribeNotificationResponse, error)
}

type SendNotificationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r SendNotificationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SendNotificationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SubscriberStatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Stats
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r SubscriberStatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SubscriberStatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SubscriberStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Status
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r SubscriberStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SubscriberStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SubscribeNotificationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r SubscribeNotificationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SubscribeNotificationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UnsubscribeNotificationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r UnsubscribeNotificationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UnsubscribeNotificationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// SendNotificationWithBodyWithResponse request with arbitrary body returning *SendNotificationResponse
func (c *ClientWithResponses) SendNotificationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SendNotificationResponse, error) {
	rsp, err := c.SendNotificationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSendNotificationResponse(rsp)
}

func (c *ClientWithResponses) SendNotificationWithResponse(ctx context.Context, body SendNotificationJSONRequestBody, reqEditors ...RequestEditorFn) (*SendNotificationResponse, error) {
	rsp, err := c.SendNotification(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSendNotificationResponse(rsp)
}

// SubscriberStatsWithResponse request returning *SubscriberStatsResponse
func (c *ClientWithResponses) SubscriberStatsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SubscriberStatsResponse, error) {
	rsp, err := c.SubscriberStats(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSubscriberStatsResponse(rsp)
}

// SubscriberStatusWithBodyWithResponse request with arbitrary body returning *SubscriberStatusResponse
func (c *ClientWithResponses) SubscriberStatusWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SubscriberStatusResponse, error) {
	rsp, err := c.SubscriberStatusWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSubscriberStatusResponse(rsp)
}

func (c *ClientWithResponses) SubscriberStatusWithResponse(ctx context.Context, body SubscriberStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*SubscriberStatusResponse, error) {
	rsp, err := c.SubscriberStatus(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSubscriberStatusResponse(rsp)
}

// SubscribeNotificationWithBodyWithResponse request with arbitrary body returning *SubscribeNotificationResponse
func (c *ClientWithResponses) SubscribeNotificationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SubscribeNotificationResponse, error) {
	rsp, err := c.SubscribeNotificationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSubscribeNotificationResponse(rsp)
}

func (c *ClientWithResponses) SubscribeNotificationWithResponse(ctx context.Context, body SubscribeNotificationJSONRequestBody, reqEditors ...RequestEditorFn) (*SubscribeNotificationResponse, error) {
	rsp, err := c.SubscribeNotification(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSubscribeNotificationResponse(rsp)
}

// UnsubscribeNotificationWithBodyWithResponse request with arbitrary body returning *UnsubscribeNotificationResponse
func (c *ClientWithResponses) UnsubscribeNotificationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UnsubscribeNotificationResponse, error) {
	rsp, err := c.UnsubscribeNotificationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUnsubscribeNotificationResponse(rsp)
}

func (c *ClientWithResponses) UnsubscribeNotificationWithResponse(ctx context.Context, body UnsubscribeNotificationJSONRequestBody, reqEditors ...RequestEditorFn) (*UnsubscribeNotificationResponse, error) {
	rsp, err := c.UnsubscribeNotification(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUnsubscribeNotificationResponse(rsp)
}

// ParseSendNotificationResponse parses an HTTP response from a SendNotificationWithResponse call
func ParseSendNotificationResponse(rsp *http.Response) (*SendNotificationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SendNotificationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSubscriberStatsResponse parses an HTTP response from a SubscriberStatsWithResponse call
func ParseSubscriberStatsResponse(rsp *http.Response) (*SubscriberStatsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SubscriberStatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Stats
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSubscriberStatusResponse parses an HTTP response from a SubscriberStatusWithResponse call
func ParseSubscriberStatusResponse(rsp *http.Response) (*SubscriberStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SubscriberStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSubscribeNotificationResponse parses an HTTP response from a SubscribeNotificationWithResponse call
func ParseSubscribeNotificationResponse(rsp *http.Response) (*SubscribeNotificationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SubscribeNotificationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUnsubscribeNotificationResponse parses an HTTP response from a UnsubscribeNotificationWithResponse call
func ParseUnsubscribeNotificationResponse(rsp *http.Response) (*UnsubscribeNotificationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UnsubscribeNotificationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}
